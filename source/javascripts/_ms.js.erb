// Default values
var msScale = 0;
var msBases = 1;
var msRatios = 1.5;

var ms = function(s,b,r) {

  // Fast calc if not multi stranded
  if(typeof(b) === 'number') {
    return Math.pow(r, s) * b;
  }

  // Create new base array
  var bases = [b[0]];

  // Normalize base values
  for (var i = 1; i < b.length; i++) {
    // initial base value
    var base = b[i];
    // If the base is bigger than the main base
    if(base > b[0]) {
      // divide the value until it aligns with main base.
      while(base > b[0]) {
        base = base / r;
      }
      base = base * r;
    }
    // If the base is smaller than the main base.
    else if (base < b[0]) {
      // pump up the value until it aligns with main base.
      while(base < b[0]) {
        base = base * r;
      }
    }
    // Push into new array
    bases.push(base);
  }
  // Sort array from smallest to largest.
  bases = bases.sort();

  // Find step to use in calculation
  var step = Math.floor(s / bases.length);
  // Find base to use in calculation
  var base = Math.round((s / bases.length - step) * bases.length);

  return [(Math.pow(r, step) * bases[base]), base];
}